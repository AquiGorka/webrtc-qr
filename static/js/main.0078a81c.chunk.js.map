{"version":3,"sources":["assets/chime.mp3","App/components/P2P.js","App/components/Gif.js","App/components/QR.js","App/components/TextBox.js","App/components/LastData.js","App/components/Host.js","App/components/Guest.js","App/components/Chime.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","P2PContext","createContext","P2PProvider","state","offer","answer","peer","connected","hosting","joining","connect","qrcodeData","_this","on","console","log","setState","signal","guest","host","Peer","initiator","trickle","objectMode","join","data","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","P2PConsumer","Consumer","GIF","index","intervalId","_this2","setInterval","images","length","clearInterval","react","map","_","i","key","src","alt","style","width","height","objectFit","padding","boxSizing","OPTIONS","type","size","level","SIZE","Reader","segments","total","sent","handleData","_this$state","parsed","JSON","parse","defineProperty","t","keys","raw","values","sort","b","x","s","atob","onData","_ref","concat","Array","from","toLocaleString","undefined","progressBar","lib_default","opacity","position","top","left","bottom","right","delay","_facingMode","showViewFinder","onScan","onError","error","Encoder","generateImages","btoa","stringify","match","RegExp","encode","Gif","TextBox","_useDebouncedCallback","useDebouncedCallback","write","leading","debouncedCallback","slicedToArray","onChange","e","target","LastDataContext","latestWebrtcData","LastDataProvider","_useContext","useContext","_useState","useState","_useState2","setLastWebrtcData","useEffect","LastDataConsumer","Host","TextBox_TextBox","_ref2","QR_Reader","onClick","QR_Encoder","Guest","Chime","preload","autoPlay","playsInline","chime","App","P2P_P2PProvider","LastData_LastDataProvider","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0078a81c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chime.972c97d9.mp3\";","import React, { Component, createContext } from 'react'\nimport Peer from 'simple-peer'\n\nconst P2PContext = createContext({})\n\nclass P2PProvider extends Component {\n  state = {\n    offer: null,\n    answer: null,\n    peer: null,\n    connected: false,\n    hosting: false,\n    joining: false,\n  }\n\n  render() {\n    return (\n      <P2PContext.Provider\n        value={{\n          ...this.state,\n          connect: this.connect,\n          host: this.host,\n          guest: this.guest,\n          join: this.join,\n        }}\n      >\n        {this.props.children}\n      </P2PContext.Provider>\n    )\n  }\n\n  connect = qrcodeData => {\n    const { peer } = this.state\n    peer.on('connect', () => {\n      console.log('Host connected')\n      this.setState({ connected: true })\n    })\n    peer.signal(qrcodeData)\n  }\n\n  guest = () => {\n    this.setState({ joining: true })\n  }\n\n  host = () => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      objectMode: true,\n    })\n    peer.on('signal', offer => this.setState({ offer }))\n    this.setState({ peer, hosting: true })\n  }\n\n  join = data => {\n    const peer = new Peer({\n      trickle: false,\n      objectMode: true,\n    })\n    peer.on('signal', answer => this.setState({ answer }))\n    peer.on('connect', () => {\n      console.log('Guest connected')\n      this.setState({ connected: true })\n    })\n    peer.signal(data)\n    this.setState({ peer })\n  }\n}\n\nconst P2PConsumer = P2PContext.Consumer\n\nexport { P2PContext, P2PProvider, P2PConsumer }\n","import React, { Component, Fragment } from 'react'\n\nconst INTERVAL = 200\n\nclass GIF extends Component {\n  state = { index: 0, intervalId: null }\n\n  componentDidMount() {\n    const intervalId = setInterval(() => {\n      const index =\n        this.state.index === this.props.images.length - 1\n          ? 0\n          : this.state.index + 1\n      this.setState({ index })\n    }, INTERVAL)\n    this.setState({ intervalId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId)\n  }\n\n  render() {\n    const { images } = this.props\n    if (!images.length) {\n      return null\n    }\n    const { index } = this.state\n\n    return (\n      <Fragment>\n        <p>\n          Sending {\n            images.map(\n              (_, i) => i === index ? '█' : '▁'\n            ).join('')\n          }\n        </p>\n        <img\n          key={index}\n          src={images[index]}\n          alt={index}\n          style={{\n            width: '90vw',\n            height: '90vh',\n            objectFit: 'contain',\n            padding: '5vw',\n            boxSizing: 'border-box',\n          }}\n        />\n      </Fragment>\n    )\n  }\n}\n\nexport default GIF\n","import React, { Component, Fragment } from 'react'\nimport encode from 'qr-encode'\nimport QrR from 'react-qr-reader'\nimport GIF from './Gif'\n\nconst OPTIONS = { type: 10, size: 6, level: 'H' }\nconst SIZE = 40\n\nexport const progressBar = ({segments, total}) =>\n  `${\n    Array.from(Array(total).keys()).map(\n      (i) => i in segments ? '█' : '▁'\n    ).join('')\n  } ${\n    (\n      Object.keys(segments).length / total\n    ).toLocaleString(undefined, {style: 'percent'})\n  }`\n\nclass Reader extends Component {\n  state = { data: null, segments: {}, total: 0, sent: false }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <Fragment>\n        <p>\n          Received {\n            this.state.total\n            ? progressBar(this.state)\n            : \"nothing so far.\"\n          }\n        </p>\n        <QrR\n          style={{\n            opacity: 0.1,\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n          }}\n          delay={10}\n          _facingMode=\"user\"\n          showViewFinder={false}\n          onScan={this.handleData}\n          onError={error => console.log('--> Error: ', error)}\n        />\n      </Fragment>\n    )\n  }\n\n  handleData = data => {\n    if (data) {\n      const { segments, sent } = this.state\n      const parsed = JSON.parse(data)\n      if (!segments[parsed.i]){\n        this.setState({\n          segments: {...segments, [parsed.i]: parsed},\n          total: parsed.t,\n        })\n      }\n      if (parsed.t === Object.keys(segments).length && !sent) {\n        this.setState({ sent: true })\n        const raw = Object.values(segments)\n          .sort((a, b) => a.i - b.i)\n          .map(x => x.s)\n          .join('')\n        const signal = JSON.parse(atob(raw))\n        this.props.onData(signal)\n      }\n    }\n  }\n}\n\nclass Encoder extends Component {\n  state = { images: [] }\n\n  componentDidMount() {\n    const { data } = this.props\n    if (!data) {\n      return\n    }\n    this.generateImages(data)\n  }\n\n  render() {\n    return <GIF images={this.state.images} />\n  }\n\n  generateImages = data => {\n    const serialized = btoa(JSON.stringify(data))\n    const segments = serialized.match(new RegExp('.{1,' + SIZE + '}', 'g'))\n    const images = segments.map((s, i) =>\n      encode(JSON.stringify({ t: segments.length, i, s }), OPTIONS),\n    )\n    this.setState({ images })\n  }\n}\n\nexport { Encoder, Reader }\n","import React from 'react'\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const TextBox = ({peer}) => {\n  const [debouncedCallback] = useDebouncedCallback((value) => {\n    peer.write(value)\n  }, 100, {leading: true})\n  return <input onChange={\n    (e) => debouncedCallback(e.target.value)}>\n  </input>\n}\n","import React, { createContext, useState, useEffect, useContext } from 'react'\n\nimport {P2PContext} from './P2P'\n\nconst LastDataContext = createContext({latestWebrtcData: ''})\n\n\nconst LastDataProvider = ({children}) => {\n  const {connected, peer} = useContext(P2PContext)\n  const [latestWebrtcData, setLastWebrtcData] = useState();\n  useEffect(() => {\n    console.log(\"effect\")\n    if(connected) {\n      peer.on(\n        'data',\n        data => setLastWebrtcData(data)\n      )\n    }\n  }, [connected, peer])\n\n  return (\n      <LastDataContext.Provider\n        value={{latestWebrtcData}}\n      >\n        {children}\n      </LastDataContext.Provider>\n  )\n}\n\nconst LastDataConsumer = LastDataContext.Consumer\n\nexport { LastDataContext, LastDataProvider, LastDataConsumer }\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\nimport { TextBox } from './TextBox'\nimport { LastDataConsumer } from './LastData'\n\nexport default () => (\n  <P2PConsumer>\n    {({ host, connect, offer, hosting, joining, connected, peer }) => {\n      if (joining) {\n        return null\n      }\n\n      if (connected) {\n        return <div>\n          <p>Host connected.</p>\n          <TextBox peer={peer}/>\n          <p>\n            <LastDataConsumer>\n              {({latestWebrtcData}) => latestWebrtcData}\n            </LastDataConsumer>\n          </p>\n        </div>\n      }\n\n      return (\n        <Fragment>\n          {hosting && <Reader onData={data => connect(data)} />}\n          {!hosting && <button onClick={host}>Host</button>}\n          {offer && <Encoder data={offer} />}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Fragment } from 'react'\nimport { P2PConsumer } from './P2P'\nimport { Encoder, Reader } from './QR'\nimport { TextBox } from './TextBox'\nimport { LastDataConsumer } from './LastData'\n\nexport default () => (\n  <P2PConsumer>\n    {({ guest, join, answer, hosting, joining, connected, peer }) => {\n      if (hosting) {\n        return null\n      }\n\n      if (connected) {\n        return <div>\n          <p>Guest connected.</p>\n          <TextBox peer={peer}/>\n          <p>\n            <LastDataConsumer>\n              {({latestWebrtcData}) => latestWebrtcData}\n            </LastDataConsumer>\n          </p>\n        </div>\n      }\n\n      return (\n        <Fragment>\n          {!joining && <button onClick={guest}>Join</button>}\n          {joining && <Reader onData={data => join(data)} />}\n          {answer && <Encoder data={answer} />}\n        </Fragment>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React from 'react'\nimport { P2PConsumer } from './P2P'\nimport chime from '../../assets/chime.mp3'\n\nexport default () => (\n  <P2PConsumer>\n    {({ connected }) => {\n      if (!connected) {\n        return null\n      }\n\n      return (\n        <audio preload=\"auto\" autoPlay playsInline>\n          <source src={chime} />\n        </audio>\n      )\n    }}\n  </P2PConsumer>\n)\n","import React, { Component } from 'react'\nimport { P2PProvider } from './components/P2P'\nimport Host from './components/Host'\nimport Guest from './components/Guest'\nimport Chime from './components/Chime'\nimport { LastDataProvider } from './components/LastData'\n\nclass App extends Component {\n  render() {\n    return (\n      <P2PProvider>\n        <LastDataProvider>\n          <Host />\n          <Guest />\n          <Chime />\n        </LastDataProvider>\n      </P2PProvider>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}